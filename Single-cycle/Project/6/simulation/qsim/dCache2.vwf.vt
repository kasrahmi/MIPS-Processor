// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/29/2024 15:09:09"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    dCache
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module dCache_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] address;
reg clockIn;
reg clockOut;
reg outEn;
reg [7:0] treg_writeData;
reg writeEn;
// wires                                               
wire [7:0] readData;
wire [7:0] writeData;

// assign statements (if any)                          
assign writeData = treg_writeData;
dCache i1 (
// port map - connection between master ports and signals/registers   
	.address(address),
	.clockIn(clockIn),
	.clockOut(clockOut),
	.outEn(outEn),
	.readData(readData),
	.writeData(writeData),
	.writeEn(writeEn)
);
initial 
begin 
#1000000 $finish;
end 
// address[ 7 ]
initial
begin
	address[7] = 1'b0;
end 
// address[ 6 ]
initial
begin
	address[6] = 1'b0;
end 
// address[ 5 ]
initial
begin
	address[5] = 1'b0;
end 
// address[ 4 ]
initial
begin
	address[4] = 1'b0;
end 
// address[ 3 ]
initial
begin
	address[3] = 1'b0;
end 
// address[ 2 ]
initial
begin
	address[2] = 1'b1;
	address[2] = #220000 1'b0;
	address[2] = #80000 1'b1;
	address[2] = #70000 1'b0;
end 
// address[ 1 ]
initial
begin
	address[1] = 1'b0;
end 
// address[ 0 ]
initial
begin
	address[0] = 1'b0;
	address[0] = #220000 1'b1;
	address[0] = #80000 1'b0;
	address[0] = #70000 1'b1;
end 

// clockIn
initial
begin
	clockIn = 1'b1;
	# 10000;
	repeat(49)
	begin
		clockIn = 1'b0;
		clockIn = #10000 1'b1;
		# 10000;
	end
	clockIn = 1'b0;
end 

// clockOut
always
begin
	clockOut = 1'b0;
	clockOut = #10000 1'b1;
	#10000;
end 

// outEn
initial
begin
	outEn = 1'b0;
	outEn = #170000 1'b1;
end 

// writeEn
initial
begin
	writeEn = 1'b1;
	writeEn = #170000 1'b0;
end 
initial 
begin 
#1000000 $finish;
end 
endmodule

