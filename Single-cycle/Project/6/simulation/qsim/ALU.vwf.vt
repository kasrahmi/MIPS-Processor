// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/29/2024 20:07:17"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ALU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ALU_vlg_sample_tst(
	a,
	b,
	clk,
	s,
	sampler_tx
);
input [7:0] a;
input [7:0] b;
input  clk;
input [3:0] s;
output sampler_tx;

reg sample;
time current_time;
always @(a or b or clk or s)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ALU_vlg_check_tst (
	out,
	ready,
	zero,
	sampler_rx
);
input [7:0] out;
input  ready;
input  zero;
input sampler_rx;

reg [7:0] out_expected;
reg  ready_expected;
reg  zero_expected;

reg [7:0] out_prev;
reg  ready_prev;
reg  zero_prev;

reg [7:0] out_expected_prev;
reg  ready_expected_prev;
reg  zero_expected_prev;

reg [7:0] last_out_exp;
reg  last_ready_exp;
reg  last_zero_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	out_prev = out;
	ready_prev = ready;
	zero_prev = zero;
end

// update expected /o prevs

always @(trigger)
begin
	out_expected_prev = out_expected;
	ready_expected_prev = ready_expected;
	zero_expected_prev = zero_expected;
end


// expected out[ 7 ]
initial
begin
	out_expected[7] = 1'bX;
end 
// expected out[ 6 ]
initial
begin
	out_expected[6] = 1'bX;
end 
// expected out[ 5 ]
initial
begin
	out_expected[5] = 1'bX;
end 
// expected out[ 4 ]
initial
begin
	out_expected[4] = 1'bX;
end 
// expected out[ 3 ]
initial
begin
	out_expected[3] = 1'bX;
end 
// expected out[ 2 ]
initial
begin
	out_expected[2] = 1'bX;
end 
// expected out[ 1 ]
initial
begin
	out_expected[1] = 1'bX;
end 
// expected out[ 0 ]
initial
begin
	out_expected[0] = 1'bX;
end 

// expected ready
initial
begin
	ready_expected = 1'bX;
end 

// expected zero
initial
begin
	zero_expected = 1'bX;
end 
// generate trigger
always @(out_expected or out or ready_expected or ready or zero_expected or zero)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected out = %b | expected ready = %b | expected zero = %b | ",out_expected_prev,ready_expected_prev,zero_expected_prev);
	$display("| real out = %b | real ready = %b | real zero = %b | ",out_prev,ready_prev,zero_prev);
`endif
	if (
		( out_expected_prev[0] !== 1'bx ) && ( out_prev[0] !== out_expected_prev[0] )
		&& ((out_expected_prev[0] !== last_out_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_exp[0] = out_expected_prev[0];
	end
	if (
		( out_expected_prev[1] !== 1'bx ) && ( out_prev[1] !== out_expected_prev[1] )
		&& ((out_expected_prev[1] !== last_out_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_exp[1] = out_expected_prev[1];
	end
	if (
		( out_expected_prev[2] !== 1'bx ) && ( out_prev[2] !== out_expected_prev[2] )
		&& ((out_expected_prev[2] !== last_out_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_exp[2] = out_expected_prev[2];
	end
	if (
		( out_expected_prev[3] !== 1'bx ) && ( out_prev[3] !== out_expected_prev[3] )
		&& ((out_expected_prev[3] !== last_out_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_exp[3] = out_expected_prev[3];
	end
	if (
		( out_expected_prev[4] !== 1'bx ) && ( out_prev[4] !== out_expected_prev[4] )
		&& ((out_expected_prev[4] !== last_out_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_exp[4] = out_expected_prev[4];
	end
	if (
		( out_expected_prev[5] !== 1'bx ) && ( out_prev[5] !== out_expected_prev[5] )
		&& ((out_expected_prev[5] !== last_out_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_exp[5] = out_expected_prev[5];
	end
	if (
		( out_expected_prev[6] !== 1'bx ) && ( out_prev[6] !== out_expected_prev[6] )
		&& ((out_expected_prev[6] !== last_out_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_exp[6] = out_expected_prev[6];
	end
	if (
		( out_expected_prev[7] !== 1'bx ) && ( out_prev[7] !== out_expected_prev[7] )
		&& ((out_expected_prev[7] !== last_out_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_exp[7] = out_expected_prev[7];
	end
	if (
		( ready_expected_prev !== 1'bx ) && ( ready_prev !== ready_expected_prev )
		&& ((ready_expected_prev !== last_ready_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ready :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ready_expected_prev);
		$display ("     Real value = %b", ready_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ready_exp = ready_expected_prev;
	end
	if (
		( zero_expected_prev !== 1'bx ) && ( zero_prev !== zero_expected_prev )
		&& ((zero_expected_prev !== last_zero_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_expected_prev);
		$display ("     Real value = %b", zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_zero_exp = zero_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ALU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] a;
reg [7:0] b;
reg clk;
reg [3:0] s;
// wires                                               
wire [7:0] out;
wire ready;
wire zero;

wire sampler;                             

// assign statements (if any)                          
ALU i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.clk(clk),
	.out(out),
	.ready(ready),
	.s(s),
	.zero(zero)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 
// a[ 7 ]
initial
begin
	a[7] = 1'b0;
	a[7] = #400000 1'b1;
	a[7] = #20000 1'b0;
end 
// a[ 6 ]
initial
begin
	a[6] = 1'b0;
	a[6] = #400000 1'b1;
	a[6] = #20000 1'b0;
end 
// a[ 5 ]
initial
begin
	a[5] = 1'b0;
	a[5] = #400000 1'b1;
	a[5] = #20000 1'b0;
end 
// a[ 4 ]
initial
begin
	a[4] = 1'b0;
	a[4] = #400000 1'b1;
	a[4] = #20000 1'b0;
end 
// a[ 3 ]
initial
begin
	a[3] = 1'b0;
	a[3] = #400000 1'b1;
	a[3] = #20000 1'b0;
end 
// a[ 2 ]
initial
begin
	a[2] = 1'b1;
	a[2] = #470000 1'b0;
	a[2] = #20000 1'b1;
end 
// a[ 1 ]
initial
begin
	a[1] = 1'b1;
	a[1] = #470000 1'b0;
	a[1] = #20000 1'b1;
end 
// a[ 0 ]
initial
begin
	a[0] = 1'b0;
	a[0] = #400000 1'b1;
	a[0] = #20000 1'b0;
end 
// b[ 7 ]
initial
begin
	b[7] = 1'b0;
	b[7] = #400000 1'b1;
	b[7] = #20000 1'b0;
end 
// b[ 6 ]
initial
begin
	b[6] = 1'b0;
	b[6] = #400000 1'b1;
	b[6] = #20000 1'b0;
end 
// b[ 5 ]
initial
begin
	b[5] = 1'b0;
	b[5] = #400000 1'b1;
	b[5] = #20000 1'b0;
end 
// b[ 4 ]
initial
begin
	b[4] = 1'b0;
	b[4] = #400000 1'b1;
	b[4] = #20000 1'b0;
end 
// b[ 3 ]
initial
begin
	b[3] = 1'b0;
	b[3] = #400000 1'b1;
	b[3] = #20000 1'b0;
end 
// b[ 2 ]
initial
begin
	b[2] = 1'b0;
	b[2] = #400000 1'b1;
	b[2] = #20000 1'b0;
end 
// b[ 1 ]
initial
begin
	b[1] = 1'b1;
	b[1] = #470000 1'b0;
	b[1] = #20000 1'b1;
end 
// b[ 0 ]
initial
begin
	b[0] = 1'b0;
	b[0] = #400000 1'b1;
	b[0] = #20000 1'b0;
end 
// s[ 3 ]
initial
begin
	s[3] = 1'b0;
end 
// s[ 2 ]
initial
begin
	s[2] = 1'b0;
	s[2] = #240000 1'b1;
	s[2] = #270000 1'b0;
end 
// s[ 1 ]
initial
begin
	s[1] = 1'b0;
	s[1] = #110000 1'b1;
	s[1] = #130000 1'b0;
	s[1] = #150000 1'b1;
	s[1] = #120000 1'b0;
end 
// s[ 0 ]
initial
begin
	s[0] = 1'b0;
	s[0] = #40000 1'b1;
	s[0] = #70000 1'b0;
	s[0] = #70000 1'b1;
	s[0] = #60000 1'b0;
	s[0] = #60000 1'b1;
	s[0] = #90000 1'b0;
	s[0] = #60000 1'b1;
	s[0] = #60000 1'b0;
end 

ALU_vlg_sample_tst tb_sample (
	.a(a),
	.b(b),
	.clk(clk),
	.s(s),
	.sampler_tx(sampler)
);

ALU_vlg_check_tst tb_out(
	.out(out),
	.ready(ready),
	.zero(zero),
	.sampler_rx(sampler)
);
endmodule

