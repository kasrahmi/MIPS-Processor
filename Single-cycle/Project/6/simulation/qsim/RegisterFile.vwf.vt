// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/29/2024 03:06:21"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    RegisterFile
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module RegisterFile_vlg_sample_tst(
	clk,
	register1,
	register2,
	regWrite,
	writeData,
	writeRegister,
	sampler_tx
);
input  clk;
input [2:0] register1;
input [2:0] register2;
input  regWrite;
input [7:0] writeData;
input [2:0] writeRegister;
output sampler_tx;

reg sample;
time current_time;
always @(clk or register1 or register2 or regWrite or writeData or writeRegister)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module RegisterFile_vlg_check_tst (
	readData1,
	readData2,
	sampler_rx
);
input [7:0] readData1;
input [7:0] readData2;
input sampler_rx;

reg [7:0] readData1_expected;
reg [7:0] readData2_expected;

reg [7:0] readData1_prev;
reg [7:0] readData2_prev;

reg [7:0] readData1_expected_prev;
reg [7:0] readData2_expected_prev;

reg [7:0] last_readData1_exp;
reg [7:0] last_readData2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	readData1_prev = readData1;
	readData2_prev = readData2;
end

// update expected /o prevs

always @(trigger)
begin
	readData1_expected_prev = readData1_expected;
	readData2_expected_prev = readData2_expected;
end


// expected readData1[ 7 ]
initial
begin
	readData1_expected[7] = 1'bX;
end 
// expected readData1[ 6 ]
initial
begin
	readData1_expected[6] = 1'bX;
end 
// expected readData1[ 5 ]
initial
begin
	readData1_expected[5] = 1'bX;
end 
// expected readData1[ 4 ]
initial
begin
	readData1_expected[4] = 1'bX;
end 
// expected readData1[ 3 ]
initial
begin
	readData1_expected[3] = 1'bX;
end 
// expected readData1[ 2 ]
initial
begin
	readData1_expected[2] = 1'bX;
end 
// expected readData1[ 1 ]
initial
begin
	readData1_expected[1] = 1'bX;
end 
// expected readData1[ 0 ]
initial
begin
	readData1_expected[0] = 1'bX;
end 
// expected readData2[ 7 ]
initial
begin
	readData2_expected[7] = 1'bX;
end 
// expected readData2[ 6 ]
initial
begin
	readData2_expected[6] = 1'bX;
end 
// expected readData2[ 5 ]
initial
begin
	readData2_expected[5] = 1'bX;
end 
// expected readData2[ 4 ]
initial
begin
	readData2_expected[4] = 1'bX;
end 
// expected readData2[ 3 ]
initial
begin
	readData2_expected[3] = 1'bX;
end 
// expected readData2[ 2 ]
initial
begin
	readData2_expected[2] = 1'bX;
end 
// expected readData2[ 1 ]
initial
begin
	readData2_expected[1] = 1'bX;
end 
// expected readData2[ 0 ]
initial
begin
	readData2_expected[0] = 1'bX;
end 
// generate trigger
always @(readData1_expected or readData1 or readData2_expected or readData2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected readData1 = %b | expected readData2 = %b | ",readData1_expected_prev,readData2_expected_prev);
	$display("| real readData1 = %b | real readData2 = %b | ",readData1_prev,readData2_prev);
`endif
	if (
		( readData1_expected_prev[0] !== 1'bx ) && ( readData1_prev[0] !== readData1_expected_prev[0] )
		&& ((readData1_expected_prev[0] !== last_readData1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData1_expected_prev);
		$display ("     Real value = %b", readData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_readData1_exp[0] = readData1_expected_prev[0];
	end
	if (
		( readData1_expected_prev[1] !== 1'bx ) && ( readData1_prev[1] !== readData1_expected_prev[1] )
		&& ((readData1_expected_prev[1] !== last_readData1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData1_expected_prev);
		$display ("     Real value = %b", readData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_readData1_exp[1] = readData1_expected_prev[1];
	end
	if (
		( readData1_expected_prev[2] !== 1'bx ) && ( readData1_prev[2] !== readData1_expected_prev[2] )
		&& ((readData1_expected_prev[2] !== last_readData1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData1_expected_prev);
		$display ("     Real value = %b", readData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_readData1_exp[2] = readData1_expected_prev[2];
	end
	if (
		( readData1_expected_prev[3] !== 1'bx ) && ( readData1_prev[3] !== readData1_expected_prev[3] )
		&& ((readData1_expected_prev[3] !== last_readData1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData1_expected_prev);
		$display ("     Real value = %b", readData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_readData1_exp[3] = readData1_expected_prev[3];
	end
	if (
		( readData1_expected_prev[4] !== 1'bx ) && ( readData1_prev[4] !== readData1_expected_prev[4] )
		&& ((readData1_expected_prev[4] !== last_readData1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData1_expected_prev);
		$display ("     Real value = %b", readData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_readData1_exp[4] = readData1_expected_prev[4];
	end
	if (
		( readData1_expected_prev[5] !== 1'bx ) && ( readData1_prev[5] !== readData1_expected_prev[5] )
		&& ((readData1_expected_prev[5] !== last_readData1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData1_expected_prev);
		$display ("     Real value = %b", readData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_readData1_exp[5] = readData1_expected_prev[5];
	end
	if (
		( readData1_expected_prev[6] !== 1'bx ) && ( readData1_prev[6] !== readData1_expected_prev[6] )
		&& ((readData1_expected_prev[6] !== last_readData1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData1_expected_prev);
		$display ("     Real value = %b", readData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_readData1_exp[6] = readData1_expected_prev[6];
	end
	if (
		( readData1_expected_prev[7] !== 1'bx ) && ( readData1_prev[7] !== readData1_expected_prev[7] )
		&& ((readData1_expected_prev[7] !== last_readData1_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData1_expected_prev);
		$display ("     Real value = %b", readData1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_readData1_exp[7] = readData1_expected_prev[7];
	end
	if (
		( readData2_expected_prev[0] !== 1'bx ) && ( readData2_prev[0] !== readData2_expected_prev[0] )
		&& ((readData2_expected_prev[0] !== last_readData2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData2_expected_prev);
		$display ("     Real value = %b", readData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_readData2_exp[0] = readData2_expected_prev[0];
	end
	if (
		( readData2_expected_prev[1] !== 1'bx ) && ( readData2_prev[1] !== readData2_expected_prev[1] )
		&& ((readData2_expected_prev[1] !== last_readData2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData2_expected_prev);
		$display ("     Real value = %b", readData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_readData2_exp[1] = readData2_expected_prev[1];
	end
	if (
		( readData2_expected_prev[2] !== 1'bx ) && ( readData2_prev[2] !== readData2_expected_prev[2] )
		&& ((readData2_expected_prev[2] !== last_readData2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData2_expected_prev);
		$display ("     Real value = %b", readData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_readData2_exp[2] = readData2_expected_prev[2];
	end
	if (
		( readData2_expected_prev[3] !== 1'bx ) && ( readData2_prev[3] !== readData2_expected_prev[3] )
		&& ((readData2_expected_prev[3] !== last_readData2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData2_expected_prev);
		$display ("     Real value = %b", readData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_readData2_exp[3] = readData2_expected_prev[3];
	end
	if (
		( readData2_expected_prev[4] !== 1'bx ) && ( readData2_prev[4] !== readData2_expected_prev[4] )
		&& ((readData2_expected_prev[4] !== last_readData2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData2_expected_prev);
		$display ("     Real value = %b", readData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_readData2_exp[4] = readData2_expected_prev[4];
	end
	if (
		( readData2_expected_prev[5] !== 1'bx ) && ( readData2_prev[5] !== readData2_expected_prev[5] )
		&& ((readData2_expected_prev[5] !== last_readData2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData2_expected_prev);
		$display ("     Real value = %b", readData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_readData2_exp[5] = readData2_expected_prev[5];
	end
	if (
		( readData2_expected_prev[6] !== 1'bx ) && ( readData2_prev[6] !== readData2_expected_prev[6] )
		&& ((readData2_expected_prev[6] !== last_readData2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData2_expected_prev);
		$display ("     Real value = %b", readData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_readData2_exp[6] = readData2_expected_prev[6];
	end
	if (
		( readData2_expected_prev[7] !== 1'bx ) && ( readData2_prev[7] !== readData2_expected_prev[7] )
		&& ((readData2_expected_prev[7] !== last_readData2_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port readData2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", readData2_expected_prev);
		$display ("     Real value = %b", readData2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_readData2_exp[7] = readData2_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module RegisterFile_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [2:0] register1;
reg [2:0] register2;
reg regWrite;
reg [7:0] writeData;
reg [2:0] writeRegister;
// wires                                               
wire [7:0] readData1;
wire [7:0] readData2;

wire sampler;                             

// assign statements (if any)                          
RegisterFile i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.readData1(readData1),
	.readData2(readData2),
	.register1(register1),
	.register2(register2),
	.regWrite(regWrite),
	.writeData(writeData),
	.writeRegister(writeRegister)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 
// register1[ 2 ]
initial
begin
	register1[2] = 1'b1;
end 
// register1[ 1 ]
initial
begin
	register1[1] = 1'b1;
end 
// register1[ 0 ]
initial
begin
	register1[0] = 1'b1;
end 
// register2[ 2 ]
initial
begin
	register2[2] = 1'b1;
end 
// register2[ 1 ]
initial
begin
	register2[1] = 1'b0;
end 
// register2[ 0 ]
initial
begin
	register2[0] = 1'b0;
end 

// regWrite
initial
begin
	regWrite = 1'b0;
	regWrite = #20000 1'b1;
	regWrite = #20000 1'b0;
	regWrite = #40000 1'b1;
	regWrite = #20000 1'b0;
end 
// writeData[ 7 ]
initial
begin
	writeData[7] = 1'b0;
end 
// writeData[ 6 ]
initial
begin
	writeData[6] = 1'b0;
	writeData[6] = #60000 1'b1;
	writeData[6] = #40000 1'b0;
end 
// writeData[ 5 ]
initial
begin
	writeData[5] = 1'b0;
	writeData[5] = #20000 1'b1;
	writeData[5] = #20000 1'b0;
end 
// writeData[ 4 ]
initial
begin
	writeData[4] = 1'b0;
	writeData[4] = #20000 1'b1;
	writeData[4] = #20000 1'b0;
end 
// writeData[ 3 ]
initial
begin
	writeData[3] = 1'b0;
	writeData[3] = #60000 1'b1;
	writeData[3] = #40000 1'b0;
end 
// writeData[ 2 ]
initial
begin
	writeData[2] = 1'b0;
	writeData[2] = #20000 1'b1;
	writeData[2] = #20000 1'b0;
	writeData[2] = #20000 1'b1;
	writeData[2] = #40000 1'b0;
end 
// writeData[ 1 ]
initial
begin
	writeData[1] = 1'b0;
	writeData[1] = #20000 1'b1;
	writeData[1] = #20000 1'b0;
end 
// writeData[ 0 ]
initial
begin
	writeData[0] = 1'b0;
end 
// writeRegister[ 2 ]
initial
begin
	writeRegister[2] = 1'b0;
	writeRegister[2] = #20000 1'b1;
	writeRegister[2] = #20000 1'b0;
	writeRegister[2] = #30000 1'b1;
	writeRegister[2] = #30000 1'b0;
end 
// writeRegister[ 1 ]
initial
begin
	writeRegister[1] = 1'b0;
	writeRegister[1] = #70000 1'b1;
	writeRegister[1] = #30000 1'b0;
end 
// writeRegister[ 0 ]
initial
begin
	writeRegister[0] = 1'b0;
	writeRegister[0] = #70000 1'b1;
	writeRegister[0] = #30000 1'b0;
end 

RegisterFile_vlg_sample_tst tb_sample (
	.clk(clk),
	.register1(register1),
	.register2(register2),
	.regWrite(regWrite),
	.writeData(writeData),
	.writeRegister(writeRegister),
	.sampler_tx(sampler)
);

RegisterFile_vlg_check_tst tb_out(
	.readData1(readData1),
	.readData2(readData2),
	.sampler_rx(sampler)
);
endmodule

