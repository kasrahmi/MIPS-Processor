// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/29/2024 20:13:34"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ControlUnit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ControlUnit_vlg_sample_tst(
	instruction0,
	instruction1,
	instruction2,
	instruction12,
	instruction13,
	instruction14,
	instruction15,
	sampler_tx
);
input  instruction0;
input  instruction1;
input  instruction2;
input  instruction12;
input  instruction13;
input  instruction14;
input  instruction15;
output sampler_tx;

reg sample;
time current_time;
always @(instruction0 or instruction1 or instruction2 or instruction12 or instruction13 or instruction14 or instruction15)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ControlUnit_vlg_check_tst (
	ALUOp,
	ALUSrc,
	branch,
	JAL,
	jr,
	jump,
	memRead,
	memToReg,
	memWrite,
	regDst,
	regWrite,
	zeroExtedImm,
	sampler_rx
);
input [2:0] ALUOp;
input  ALUSrc;
input  branch;
input  JAL;
input  jr;
input  jump;
input  memRead;
input  memToReg;
input  memWrite;
input  regDst;
input  regWrite;
input  zeroExtedImm;
input sampler_rx;

reg [2:0] ALUOp_expected;
reg  ALUSrc_expected;
reg  branch_expected;
reg  JAL_expected;
reg  jr_expected;
reg  jump_expected;
reg  memRead_expected;
reg  memToReg_expected;
reg  memWrite_expected;
reg  regDst_expected;
reg  regWrite_expected;
reg  zeroExtedImm_expected;

reg [2:0] ALUOp_prev;
reg  ALUSrc_prev;
reg  branch_prev;
reg  JAL_prev;
reg  jr_prev;
reg  jump_prev;
reg  memRead_prev;
reg  memToReg_prev;
reg  memWrite_prev;
reg  regDst_prev;
reg  regWrite_prev;
reg  zeroExtedImm_prev;

reg [2:0] ALUOp_expected_prev;
reg  ALUSrc_expected_prev;
reg  branch_expected_prev;
reg  jr_expected_prev;
reg  jump_expected_prev;
reg  memToReg_expected_prev;
reg  regDst_expected_prev;
reg  regWrite_expected_prev;
reg  zeroExtedImm_expected_prev;

reg [2:0] last_ALUOp_exp;
reg  last_ALUSrc_exp;
reg  last_branch_exp;
reg  last_jr_exp;
reg  last_jump_exp;
reg  last_memToReg_exp;
reg  last_regDst_exp;
reg  last_regWrite_exp;
reg  last_zeroExtedImm_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:12] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 12'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALUOp_prev = ALUOp;
	ALUSrc_prev = ALUSrc;
	branch_prev = branch;
	JAL_prev = JAL;
	jr_prev = jr;
	jump_prev = jump;
	memRead_prev = memRead;
	memToReg_prev = memToReg;
	memWrite_prev = memWrite;
	regDst_prev = regDst;
	regWrite_prev = regWrite;
	zeroExtedImm_prev = zeroExtedImm;
end

// update expected /o prevs

always @(trigger)
begin
	ALUOp_expected_prev = ALUOp_expected;
	ALUSrc_expected_prev = ALUSrc_expected;
	branch_expected_prev = branch_expected;
	jr_expected_prev = jr_expected;
	jump_expected_prev = jump_expected;
	memToReg_expected_prev = memToReg_expected;
	regDst_expected_prev = regDst_expected;
	regWrite_expected_prev = regWrite_expected;
	zeroExtedImm_expected_prev = zeroExtedImm_expected;
end


// expected ALUOp[ 2 ]
initial
begin
	ALUOp_expected[2] = 1'bX;
end 
// expected ALUOp[ 1 ]
initial
begin
	ALUOp_expected[1] = 1'bX;
end 
// expected ALUOp[ 0 ]
initial
begin
	ALUOp_expected[0] = 1'bX;
end 

// expected ALUSrc
initial
begin
	ALUSrc_expected = 1'bX;
end 

// expected branch
initial
begin
	branch_expected = 1'bX;
end 

// expected jr
initial
begin
	jr_expected = 1'bX;
end 

// expected jump
initial
begin
	jump_expected = 1'bX;
end 

// expected memToReg
initial
begin
	memToReg_expected = 1'bX;
end 

// expected regDst
initial
begin
	regDst_expected = 1'bX;
end 

// expected regWrite
initial
begin
	regWrite_expected = 1'bX;
end 

// expected zeroExtedImm
initial
begin
	zeroExtedImm_expected = 1'bX;
end 
// generate trigger
always @(ALUOp_expected or ALUOp or ALUSrc_expected or ALUSrc or branch_expected or branch or JAL_expected or JAL or jr_expected or jr or jump_expected or jump or memRead_expected or memRead or memToReg_expected or memToReg or memWrite_expected or memWrite or regDst_expected or regDst or regWrite_expected or regWrite or zeroExtedImm_expected or zeroExtedImm)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALUOp = %b | expected ALUSrc = %b | expected branch = %b | expected JAL = %b | expected jr = %b | expected jump = %b | expected memRead = %b | expected memToReg = %b | expected memWrite = %b | expected regDst = %b | expected regWrite = %b | expected zeroExtedImm = %b | ",ALUOp_expected_prev,ALUSrc_expected_prev,branch_expected_prev,JAL_expected_prev,jr_expected_prev,jump_expected_prev,memRead_expected_prev,memToReg_expected_prev,memWrite_expected_prev,regDst_expected_prev,regWrite_expected_prev,zeroExtedImm_expected_prev);
	$display("| real ALUOp = %b | real ALUSrc = %b | real branch = %b | real JAL = %b | real jr = %b | real jump = %b | real memRead = %b | real memToReg = %b | real memWrite = %b | real regDst = %b | real regWrite = %b | real zeroExtedImm = %b | ",ALUOp_prev,ALUSrc_prev,branch_prev,JAL_prev,jr_prev,jump_prev,memRead_prev,memToReg_prev,memWrite_prev,regDst_prev,regWrite_prev,zeroExtedImm_prev);
`endif
	if (
		( ALUOp_expected_prev[0] !== 1'bx ) && ( ALUOp_prev[0] !== ALUOp_expected_prev[0] )
		&& ((ALUOp_expected_prev[0] !== last_ALUOp_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOp[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOp_expected_prev);
		$display ("     Real value = %b", ALUOp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUOp_exp[0] = ALUOp_expected_prev[0];
	end
	if (
		( ALUOp_expected_prev[1] !== 1'bx ) && ( ALUOp_prev[1] !== ALUOp_expected_prev[1] )
		&& ((ALUOp_expected_prev[1] !== last_ALUOp_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOp[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOp_expected_prev);
		$display ("     Real value = %b", ALUOp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUOp_exp[1] = ALUOp_expected_prev[1];
	end
	if (
		( ALUOp_expected_prev[2] !== 1'bx ) && ( ALUOp_prev[2] !== ALUOp_expected_prev[2] )
		&& ((ALUOp_expected_prev[2] !== last_ALUOp_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOp[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOp_expected_prev);
		$display ("     Real value = %b", ALUOp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUOp_exp[2] = ALUOp_expected_prev[2];
	end
	if (
		( ALUSrc_expected_prev !== 1'bx ) && ( ALUSrc_prev !== ALUSrc_expected_prev )
		&& ((ALUSrc_expected_prev !== last_ALUSrc_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrc :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrc_expected_prev);
		$display ("     Real value = %b", ALUSrc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUSrc_exp = ALUSrc_expected_prev;
	end
	if (
		( branch_expected_prev !== 1'bx ) && ( branch_prev !== branch_expected_prev )
		&& ((branch_expected_prev !== last_branch_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branch :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branch_expected_prev);
		$display ("     Real value = %b", branch_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_branch_exp = branch_expected_prev;
	end
	if (
		( jr_expected_prev !== 1'bx ) && ( jr_prev !== jr_expected_prev )
		&& ((jr_expected_prev !== last_jr_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jr :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jr_expected_prev);
		$display ("     Real value = %b", jr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_jr_exp = jr_expected_prev;
	end
	if (
		( jump_expected_prev !== 1'bx ) && ( jump_prev !== jump_expected_prev )
		&& ((jump_expected_prev !== last_jump_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_expected_prev);
		$display ("     Real value = %b", jump_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_jump_exp = jump_expected_prev;
	end
	if (
		( memToReg_expected_prev !== 1'bx ) && ( memToReg_prev !== memToReg_expected_prev )
		&& ((memToReg_expected_prev !== last_memToReg_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memToReg :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memToReg_expected_prev);
		$display ("     Real value = %b", memToReg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_memToReg_exp = memToReg_expected_prev;
	end
	if (
		( regDst_expected_prev !== 1'bx ) && ( regDst_prev !== regDst_expected_prev )
		&& ((regDst_expected_prev !== last_regDst_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regDst :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regDst_expected_prev);
		$display ("     Real value = %b", regDst_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_regDst_exp = regDst_expected_prev;
	end
	if (
		( regWrite_expected_prev !== 1'bx ) && ( regWrite_prev !== regWrite_expected_prev )
		&& ((regWrite_expected_prev !== last_regWrite_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regWrite :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regWrite_expected_prev);
		$display ("     Real value = %b", regWrite_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_regWrite_exp = regWrite_expected_prev;
	end
	if (
		( zeroExtedImm_expected_prev !== 1'bx ) && ( zeroExtedImm_prev !== zeroExtedImm_expected_prev )
		&& ((zeroExtedImm_expected_prev !== last_zeroExtedImm_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zeroExtedImm :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zeroExtedImm_expected_prev);
		$display ("     Real value = %b", zeroExtedImm_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_zeroExtedImm_exp = zeroExtedImm_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ControlUnit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg instruction0;
reg instruction1;
reg instruction2;
reg instruction12;
reg instruction13;
reg instruction14;
reg instruction15;
// wires                                               
wire [2:0] ALUOp;
wire ALUSrc;
wire branch;
wire JAL;
wire jr;
wire jump;
wire memRead;
wire memToReg;
wire memWrite;
wire regDst;
wire regWrite;
wire zeroExtedImm;

wire sampler;                             

// assign statements (if any)                          
ControlUnit i1 (
// port map - connection between master ports and signals/registers   
	.ALUOp(ALUOp),
	.ALUSrc(ALUSrc),
	.branch(branch),
	.instruction0(instruction0),
	.instruction1(instruction1),
	.instruction2(instruction2),
	.instruction12(instruction12),
	.instruction13(instruction13),
	.instruction14(instruction14),
	.instruction15(instruction15),
	.JAL(JAL),
	.jr(jr),
	.jump(jump),
	.memRead(memRead),
	.memToReg(memToReg),
	.memWrite(memWrite),
	.regDst(regDst),
	.regWrite(regWrite),
	.zeroExtedImm(zeroExtedImm)
);

// instruction15
initial
begin
	instruction15 = 1'b0;
	instruction15 = #430000 1'b1;
	instruction15 = #130000 1'b0;
end 

// instruction14
initial
begin
	instruction14 = 1'b0;
	instruction14 = #180000 1'b1;
	instruction14 = #250000 1'b0;
end 

// instruction13
initial
begin
	instruction13 = 1'b0;
	instruction13 = #60000 1'b1;
	instruction13 = #120000 1'b0;
	instruction13 = #120000 1'b1;
	instruction13 = #130000 1'b0;
end 

// instruction12
initial
begin
	instruction12 = 1'b0;
	instruction12 = #120000 1'b1;
	instruction12 = #60000 1'b0;
	instruction12 = #60000 1'b1;
	instruction12 = #60000 1'b0;
	instruction12 = #70000 1'b1;
	instruction12 = #60000 1'b0;
	instruction12 = #60000 1'b1;
	instruction12 = #70000 1'b0;
end 

// instruction2
initial
begin
	instruction2 = 1'b0;
end 

// instruction1
initial
begin
	instruction1 = 1'b0;
end 

// instruction0
initial
begin
	instruction0 = 1'b0;
end 

ControlUnit_vlg_sample_tst tb_sample (
	.instruction0(instruction0),
	.instruction1(instruction1),
	.instruction2(instruction2),
	.instruction12(instruction12),
	.instruction13(instruction13),
	.instruction14(instruction14),
	.instruction15(instruction15),
	.sampler_tx(sampler)
);

ControlUnit_vlg_check_tst tb_out(
	.ALUOp(ALUOp),
	.ALUSrc(ALUSrc),
	.branch(branch),
	.JAL(JAL),
	.jr(jr),
	.jump(jump),
	.memRead(memRead),
	.memToReg(memToReg),
	.memWrite(memWrite),
	.regDst(regDst),
	.regWrite(regWrite),
	.zeroExtedImm(zeroExtedImm),
	.sampler_rx(sampler)
);
endmodule

