// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/05/2024 15:13:06"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    datapath
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module datapath_vlg_sample_tst(
	clk,
	i_clock,
	sampler_tx
);
input  clk;
input  i_clock;
output sampler_tx;

reg sample;
time current_time;
always @(clk or i_clock)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module datapath_vlg_check_tst (
	ALUresult,
	currPc,
	finalOut,
	instruction,
	jr,
	jump,
	pc_2,
	pcIn,
	pcOut,
	writeData,
	sampler_rx
);
input [7:0] ALUresult;
input [7:0] currPc;
input [7:0] finalOut;
input [15:0] instruction;
input  jr;
input  jump;
input [7:0] pc_2;
input [7:0] pcIn;
input [7:0] pcOut;
input [7:0] writeData;
input sampler_rx;

reg [7:0] ALUresult_expected;
reg [7:0] currPc_expected;
reg [7:0] finalOut_expected;
reg [15:0] instruction_expected;
reg  jr_expected;
reg  jump_expected;
reg [7:0] pc_2_expected;
reg [7:0] pcIn_expected;
reg [7:0] pcOut_expected;
reg [7:0] writeData_expected;

reg [7:0] ALUresult_prev;
reg [7:0] currPc_prev;
reg [7:0] finalOut_prev;
reg [15:0] instruction_prev;
reg  jr_prev;
reg  jump_prev;
reg [7:0] pc_2_prev;
reg [7:0] pcIn_prev;
reg [7:0] pcOut_prev;
reg [7:0] writeData_prev;

reg [7:0] ALUresult_expected_prev;
reg [7:0] currPc_expected_prev;
reg [7:0] finalOut_expected_prev;
reg [15:0] instruction_expected_prev;
reg  jr_expected_prev;
reg  jump_expected_prev;
reg [7:0] pc_2_expected_prev;
reg [7:0] pcIn_expected_prev;
reg [7:0] pcOut_expected_prev;
reg [7:0] writeData_expected_prev;

reg [7:0] last_ALUresult_exp;
reg [7:0] last_currPc_exp;
reg [7:0] last_finalOut_exp;
reg [15:0] last_instruction_exp;
reg  last_jr_exp;
reg  last_jump_exp;
reg [7:0] last_pc_2_exp;
reg [7:0] last_pcIn_exp;
reg [7:0] last_pcOut_exp;
reg [7:0] last_writeData_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:10] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 10'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALUresult_prev = ALUresult;
	currPc_prev = currPc;
	finalOut_prev = finalOut;
	instruction_prev = instruction;
	jr_prev = jr;
	jump_prev = jump;
	pc_2_prev = pc_2;
	pcIn_prev = pcIn;
	pcOut_prev = pcOut;
	writeData_prev = writeData;
end

// update expected /o prevs

always @(trigger)
begin
	ALUresult_expected_prev = ALUresult_expected;
	currPc_expected_prev = currPc_expected;
	finalOut_expected_prev = finalOut_expected;
	instruction_expected_prev = instruction_expected;
	jr_expected_prev = jr_expected;
	jump_expected_prev = jump_expected;
	pc_2_expected_prev = pc_2_expected;
	pcIn_expected_prev = pcIn_expected;
	pcOut_expected_prev = pcOut_expected;
	writeData_expected_prev = writeData_expected;
end


// expected instruction[ 15 ]
initial
begin
	instruction_expected[15] = 1'bX;
end 
// expected instruction[ 14 ]
initial
begin
	instruction_expected[14] = 1'bX;
end 
// expected instruction[ 13 ]
initial
begin
	instruction_expected[13] = 1'bX;
end 
// expected instruction[ 12 ]
initial
begin
	instruction_expected[12] = 1'bX;
end 
// expected instruction[ 11 ]
initial
begin
	instruction_expected[11] = 1'bX;
end 
// expected instruction[ 10 ]
initial
begin
	instruction_expected[10] = 1'bX;
end 
// expected instruction[ 9 ]
initial
begin
	instruction_expected[9] = 1'bX;
end 
// expected instruction[ 8 ]
initial
begin
	instruction_expected[8] = 1'bX;
end 
// expected instruction[ 7 ]
initial
begin
	instruction_expected[7] = 1'bX;
end 
// expected instruction[ 6 ]
initial
begin
	instruction_expected[6] = 1'bX;
end 
// expected instruction[ 5 ]
initial
begin
	instruction_expected[5] = 1'bX;
end 
// expected instruction[ 4 ]
initial
begin
	instruction_expected[4] = 1'bX;
end 
// expected instruction[ 3 ]
initial
begin
	instruction_expected[3] = 1'bX;
end 
// expected instruction[ 2 ]
initial
begin
	instruction_expected[2] = 1'bX;
end 
// expected instruction[ 1 ]
initial
begin
	instruction_expected[1] = 1'bX;
end 
// expected instruction[ 0 ]
initial
begin
	instruction_expected[0] = 1'bX;
end 
// expected pc_2[ 7 ]
initial
begin
	pc_2_expected[7] = 1'bX;
end 
// expected pc_2[ 6 ]
initial
begin
	pc_2_expected[6] = 1'bX;
end 
// expected pc_2[ 5 ]
initial
begin
	pc_2_expected[5] = 1'bX;
end 
// expected pc_2[ 4 ]
initial
begin
	pc_2_expected[4] = 1'bX;
end 
// expected pc_2[ 3 ]
initial
begin
	pc_2_expected[3] = 1'bX;
end 
// expected pc_2[ 2 ]
initial
begin
	pc_2_expected[2] = 1'bX;
end 
// expected pc_2[ 1 ]
initial
begin
	pc_2_expected[1] = 1'bX;
end 
// expected pc_2[ 0 ]
initial
begin
	pc_2_expected[0] = 1'bX;
end 
// expected pcIn[ 7 ]
initial
begin
	pcIn_expected[7] = 1'bX;
end 
// expected pcIn[ 6 ]
initial
begin
	pcIn_expected[6] = 1'bX;
end 
// expected pcIn[ 5 ]
initial
begin
	pcIn_expected[5] = 1'bX;
end 
// expected pcIn[ 4 ]
initial
begin
	pcIn_expected[4] = 1'bX;
end 
// expected pcIn[ 3 ]
initial
begin
	pcIn_expected[3] = 1'bX;
end 
// expected pcIn[ 2 ]
initial
begin
	pcIn_expected[2] = 1'bX;
end 
// expected pcIn[ 1 ]
initial
begin
	pcIn_expected[1] = 1'bX;
end 
// expected pcIn[ 0 ]
initial
begin
	pcIn_expected[0] = 1'bX;
end 
// expected pcOut[ 7 ]
initial
begin
	pcOut_expected[7] = 1'bX;
end 
// expected pcOut[ 6 ]
initial
begin
	pcOut_expected[6] = 1'bX;
end 
// expected pcOut[ 5 ]
initial
begin
	pcOut_expected[5] = 1'bX;
end 
// expected pcOut[ 4 ]
initial
begin
	pcOut_expected[4] = 1'bX;
end 
// expected pcOut[ 3 ]
initial
begin
	pcOut_expected[3] = 1'bX;
end 
// expected pcOut[ 2 ]
initial
begin
	pcOut_expected[2] = 1'bX;
end 
// expected pcOut[ 1 ]
initial
begin
	pcOut_expected[1] = 1'bX;
end 
// expected pcOut[ 0 ]
initial
begin
	pcOut_expected[0] = 1'bX;
end 
// expected currPc[ 7 ]
initial
begin
	currPc_expected[7] = 1'bX;
end 
// expected currPc[ 6 ]
initial
begin
	currPc_expected[6] = 1'bX;
end 
// expected currPc[ 5 ]
initial
begin
	currPc_expected[5] = 1'bX;
end 
// expected currPc[ 4 ]
initial
begin
	currPc_expected[4] = 1'bX;
end 
// expected currPc[ 3 ]
initial
begin
	currPc_expected[3] = 1'bX;
end 
// expected currPc[ 2 ]
initial
begin
	currPc_expected[2] = 1'bX;
end 
// expected currPc[ 1 ]
initial
begin
	currPc_expected[1] = 1'bX;
end 
// expected currPc[ 0 ]
initial
begin
	currPc_expected[0] = 1'bX;
end 
// expected ALUresult[ 7 ]
initial
begin
	ALUresult_expected[7] = 1'bX;
end 
// expected ALUresult[ 6 ]
initial
begin
	ALUresult_expected[6] = 1'bX;
end 
// expected ALUresult[ 5 ]
initial
begin
	ALUresult_expected[5] = 1'bX;
end 
// expected ALUresult[ 4 ]
initial
begin
	ALUresult_expected[4] = 1'bX;
end 
// expected ALUresult[ 3 ]
initial
begin
	ALUresult_expected[3] = 1'bX;
end 
// expected ALUresult[ 2 ]
initial
begin
	ALUresult_expected[2] = 1'bX;
end 
// expected ALUresult[ 1 ]
initial
begin
	ALUresult_expected[1] = 1'bX;
end 
// expected ALUresult[ 0 ]
initial
begin
	ALUresult_expected[0] = 1'bX;
end 
// expected writeData[ 7 ]
initial
begin
	writeData_expected[7] = 1'bX;
end 
// expected writeData[ 6 ]
initial
begin
	writeData_expected[6] = 1'bX;
end 
// expected writeData[ 5 ]
initial
begin
	writeData_expected[5] = 1'bX;
end 
// expected writeData[ 4 ]
initial
begin
	writeData_expected[4] = 1'bX;
end 
// expected writeData[ 3 ]
initial
begin
	writeData_expected[3] = 1'bX;
end 
// expected writeData[ 2 ]
initial
begin
	writeData_expected[2] = 1'bX;
end 
// expected writeData[ 1 ]
initial
begin
	writeData_expected[1] = 1'bX;
end 
// expected writeData[ 0 ]
initial
begin
	writeData_expected[0] = 1'bX;
end 
// expected finalOut[ 7 ]
initial
begin
	finalOut_expected[7] = 1'bX;
end 
// expected finalOut[ 6 ]
initial
begin
	finalOut_expected[6] = 1'bX;
end 
// expected finalOut[ 5 ]
initial
begin
	finalOut_expected[5] = 1'bX;
end 
// expected finalOut[ 4 ]
initial
begin
	finalOut_expected[4] = 1'bX;
end 
// expected finalOut[ 3 ]
initial
begin
	finalOut_expected[3] = 1'bX;
end 
// expected finalOut[ 2 ]
initial
begin
	finalOut_expected[2] = 1'bX;
end 
// expected finalOut[ 1 ]
initial
begin
	finalOut_expected[1] = 1'bX;
end 
// expected finalOut[ 0 ]
initial
begin
	finalOut_expected[0] = 1'bX;
end 

// expected jr
initial
begin
	jr_expected = 1'bX;
end 

// expected jump
initial
begin
	jump_expected = 1'bX;
end 
// generate trigger
always @(ALUresult_expected or ALUresult or currPc_expected or currPc or finalOut_expected or finalOut or instruction_expected or instruction or jr_expected or jr or jump_expected or jump or pc_2_expected or pc_2 or pcIn_expected or pcIn or pcOut_expected or pcOut or writeData_expected or writeData)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALUresult = %b | expected currPc = %b | expected finalOut = %b | expected instruction = %b | expected jr = %b | expected jump = %b | expected pc_2 = %b | expected pcIn = %b | expected pcOut = %b | expected writeData = %b | ",ALUresult_expected_prev,currPc_expected_prev,finalOut_expected_prev,instruction_expected_prev,jr_expected_prev,jump_expected_prev,pc_2_expected_prev,pcIn_expected_prev,pcOut_expected_prev,writeData_expected_prev);
	$display("| real ALUresult = %b | real currPc = %b | real finalOut = %b | real instruction = %b | real jr = %b | real jump = %b | real pc_2 = %b | real pcIn = %b | real pcOut = %b | real writeData = %b | ",ALUresult_prev,currPc_prev,finalOut_prev,instruction_prev,jr_prev,jump_prev,pc_2_prev,pcIn_prev,pcOut_prev,writeData_prev);
`endif
	if (
		( ALUresult_expected_prev[0] !== 1'bx ) && ( ALUresult_prev[0] !== ALUresult_expected_prev[0] )
		&& ((ALUresult_expected_prev[0] !== last_ALUresult_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUresult[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUresult_expected_prev);
		$display ("     Real value = %b", ALUresult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUresult_exp[0] = ALUresult_expected_prev[0];
	end
	if (
		( ALUresult_expected_prev[1] !== 1'bx ) && ( ALUresult_prev[1] !== ALUresult_expected_prev[1] )
		&& ((ALUresult_expected_prev[1] !== last_ALUresult_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUresult[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUresult_expected_prev);
		$display ("     Real value = %b", ALUresult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUresult_exp[1] = ALUresult_expected_prev[1];
	end
	if (
		( ALUresult_expected_prev[2] !== 1'bx ) && ( ALUresult_prev[2] !== ALUresult_expected_prev[2] )
		&& ((ALUresult_expected_prev[2] !== last_ALUresult_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUresult[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUresult_expected_prev);
		$display ("     Real value = %b", ALUresult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUresult_exp[2] = ALUresult_expected_prev[2];
	end
	if (
		( ALUresult_expected_prev[3] !== 1'bx ) && ( ALUresult_prev[3] !== ALUresult_expected_prev[3] )
		&& ((ALUresult_expected_prev[3] !== last_ALUresult_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUresult[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUresult_expected_prev);
		$display ("     Real value = %b", ALUresult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUresult_exp[3] = ALUresult_expected_prev[3];
	end
	if (
		( ALUresult_expected_prev[4] !== 1'bx ) && ( ALUresult_prev[4] !== ALUresult_expected_prev[4] )
		&& ((ALUresult_expected_prev[4] !== last_ALUresult_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUresult[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUresult_expected_prev);
		$display ("     Real value = %b", ALUresult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUresult_exp[4] = ALUresult_expected_prev[4];
	end
	if (
		( ALUresult_expected_prev[5] !== 1'bx ) && ( ALUresult_prev[5] !== ALUresult_expected_prev[5] )
		&& ((ALUresult_expected_prev[5] !== last_ALUresult_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUresult[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUresult_expected_prev);
		$display ("     Real value = %b", ALUresult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUresult_exp[5] = ALUresult_expected_prev[5];
	end
	if (
		( ALUresult_expected_prev[6] !== 1'bx ) && ( ALUresult_prev[6] !== ALUresult_expected_prev[6] )
		&& ((ALUresult_expected_prev[6] !== last_ALUresult_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUresult[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUresult_expected_prev);
		$display ("     Real value = %b", ALUresult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUresult_exp[6] = ALUresult_expected_prev[6];
	end
	if (
		( ALUresult_expected_prev[7] !== 1'bx ) && ( ALUresult_prev[7] !== ALUresult_expected_prev[7] )
		&& ((ALUresult_expected_prev[7] !== last_ALUresult_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUresult[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUresult_expected_prev);
		$display ("     Real value = %b", ALUresult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUresult_exp[7] = ALUresult_expected_prev[7];
	end
	if (
		( currPc_expected_prev[0] !== 1'bx ) && ( currPc_prev[0] !== currPc_expected_prev[0] )
		&& ((currPc_expected_prev[0] !== last_currPc_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currPc[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currPc_expected_prev);
		$display ("     Real value = %b", currPc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_currPc_exp[0] = currPc_expected_prev[0];
	end
	if (
		( currPc_expected_prev[1] !== 1'bx ) && ( currPc_prev[1] !== currPc_expected_prev[1] )
		&& ((currPc_expected_prev[1] !== last_currPc_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currPc[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currPc_expected_prev);
		$display ("     Real value = %b", currPc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_currPc_exp[1] = currPc_expected_prev[1];
	end
	if (
		( currPc_expected_prev[2] !== 1'bx ) && ( currPc_prev[2] !== currPc_expected_prev[2] )
		&& ((currPc_expected_prev[2] !== last_currPc_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currPc[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currPc_expected_prev);
		$display ("     Real value = %b", currPc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_currPc_exp[2] = currPc_expected_prev[2];
	end
	if (
		( currPc_expected_prev[3] !== 1'bx ) && ( currPc_prev[3] !== currPc_expected_prev[3] )
		&& ((currPc_expected_prev[3] !== last_currPc_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currPc[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currPc_expected_prev);
		$display ("     Real value = %b", currPc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_currPc_exp[3] = currPc_expected_prev[3];
	end
	if (
		( currPc_expected_prev[4] !== 1'bx ) && ( currPc_prev[4] !== currPc_expected_prev[4] )
		&& ((currPc_expected_prev[4] !== last_currPc_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currPc[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currPc_expected_prev);
		$display ("     Real value = %b", currPc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_currPc_exp[4] = currPc_expected_prev[4];
	end
	if (
		( currPc_expected_prev[5] !== 1'bx ) && ( currPc_prev[5] !== currPc_expected_prev[5] )
		&& ((currPc_expected_prev[5] !== last_currPc_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currPc[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currPc_expected_prev);
		$display ("     Real value = %b", currPc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_currPc_exp[5] = currPc_expected_prev[5];
	end
	if (
		( currPc_expected_prev[6] !== 1'bx ) && ( currPc_prev[6] !== currPc_expected_prev[6] )
		&& ((currPc_expected_prev[6] !== last_currPc_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currPc[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currPc_expected_prev);
		$display ("     Real value = %b", currPc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_currPc_exp[6] = currPc_expected_prev[6];
	end
	if (
		( currPc_expected_prev[7] !== 1'bx ) && ( currPc_prev[7] !== currPc_expected_prev[7] )
		&& ((currPc_expected_prev[7] !== last_currPc_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port currPc[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", currPc_expected_prev);
		$display ("     Real value = %b", currPc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_currPc_exp[7] = currPc_expected_prev[7];
	end
	if (
		( finalOut_expected_prev[0] !== 1'bx ) && ( finalOut_prev[0] !== finalOut_expected_prev[0] )
		&& ((finalOut_expected_prev[0] !== last_finalOut_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalOut_expected_prev);
		$display ("     Real value = %b", finalOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_finalOut_exp[0] = finalOut_expected_prev[0];
	end
	if (
		( finalOut_expected_prev[1] !== 1'bx ) && ( finalOut_prev[1] !== finalOut_expected_prev[1] )
		&& ((finalOut_expected_prev[1] !== last_finalOut_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalOut_expected_prev);
		$display ("     Real value = %b", finalOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_finalOut_exp[1] = finalOut_expected_prev[1];
	end
	if (
		( finalOut_expected_prev[2] !== 1'bx ) && ( finalOut_prev[2] !== finalOut_expected_prev[2] )
		&& ((finalOut_expected_prev[2] !== last_finalOut_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalOut_expected_prev);
		$display ("     Real value = %b", finalOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_finalOut_exp[2] = finalOut_expected_prev[2];
	end
	if (
		( finalOut_expected_prev[3] !== 1'bx ) && ( finalOut_prev[3] !== finalOut_expected_prev[3] )
		&& ((finalOut_expected_prev[3] !== last_finalOut_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalOut_expected_prev);
		$display ("     Real value = %b", finalOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_finalOut_exp[3] = finalOut_expected_prev[3];
	end
	if (
		( finalOut_expected_prev[4] !== 1'bx ) && ( finalOut_prev[4] !== finalOut_expected_prev[4] )
		&& ((finalOut_expected_prev[4] !== last_finalOut_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalOut_expected_prev);
		$display ("     Real value = %b", finalOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_finalOut_exp[4] = finalOut_expected_prev[4];
	end
	if (
		( finalOut_expected_prev[5] !== 1'bx ) && ( finalOut_prev[5] !== finalOut_expected_prev[5] )
		&& ((finalOut_expected_prev[5] !== last_finalOut_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalOut_expected_prev);
		$display ("     Real value = %b", finalOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_finalOut_exp[5] = finalOut_expected_prev[5];
	end
	if (
		( finalOut_expected_prev[6] !== 1'bx ) && ( finalOut_prev[6] !== finalOut_expected_prev[6] )
		&& ((finalOut_expected_prev[6] !== last_finalOut_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalOut_expected_prev);
		$display ("     Real value = %b", finalOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_finalOut_exp[6] = finalOut_expected_prev[6];
	end
	if (
		( finalOut_expected_prev[7] !== 1'bx ) && ( finalOut_prev[7] !== finalOut_expected_prev[7] )
		&& ((finalOut_expected_prev[7] !== last_finalOut_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port finalOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", finalOut_expected_prev);
		$display ("     Real value = %b", finalOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_finalOut_exp[7] = finalOut_expected_prev[7];
	end
	if (
		( instruction_expected_prev[0] !== 1'bx ) && ( instruction_prev[0] !== instruction_expected_prev[0] )
		&& ((instruction_expected_prev[0] !== last_instruction_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[0] = instruction_expected_prev[0];
	end
	if (
		( instruction_expected_prev[1] !== 1'bx ) && ( instruction_prev[1] !== instruction_expected_prev[1] )
		&& ((instruction_expected_prev[1] !== last_instruction_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[1] = instruction_expected_prev[1];
	end
	if (
		( instruction_expected_prev[2] !== 1'bx ) && ( instruction_prev[2] !== instruction_expected_prev[2] )
		&& ((instruction_expected_prev[2] !== last_instruction_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[2] = instruction_expected_prev[2];
	end
	if (
		( instruction_expected_prev[3] !== 1'bx ) && ( instruction_prev[3] !== instruction_expected_prev[3] )
		&& ((instruction_expected_prev[3] !== last_instruction_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[3] = instruction_expected_prev[3];
	end
	if (
		( instruction_expected_prev[4] !== 1'bx ) && ( instruction_prev[4] !== instruction_expected_prev[4] )
		&& ((instruction_expected_prev[4] !== last_instruction_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[4] = instruction_expected_prev[4];
	end
	if (
		( instruction_expected_prev[5] !== 1'bx ) && ( instruction_prev[5] !== instruction_expected_prev[5] )
		&& ((instruction_expected_prev[5] !== last_instruction_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[5] = instruction_expected_prev[5];
	end
	if (
		( instruction_expected_prev[6] !== 1'bx ) && ( instruction_prev[6] !== instruction_expected_prev[6] )
		&& ((instruction_expected_prev[6] !== last_instruction_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[6] = instruction_expected_prev[6];
	end
	if (
		( instruction_expected_prev[7] !== 1'bx ) && ( instruction_prev[7] !== instruction_expected_prev[7] )
		&& ((instruction_expected_prev[7] !== last_instruction_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[7] = instruction_expected_prev[7];
	end
	if (
		( instruction_expected_prev[8] !== 1'bx ) && ( instruction_prev[8] !== instruction_expected_prev[8] )
		&& ((instruction_expected_prev[8] !== last_instruction_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[8] = instruction_expected_prev[8];
	end
	if (
		( instruction_expected_prev[9] !== 1'bx ) && ( instruction_prev[9] !== instruction_expected_prev[9] )
		&& ((instruction_expected_prev[9] !== last_instruction_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[9] = instruction_expected_prev[9];
	end
	if (
		( instruction_expected_prev[10] !== 1'bx ) && ( instruction_prev[10] !== instruction_expected_prev[10] )
		&& ((instruction_expected_prev[10] !== last_instruction_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[10] = instruction_expected_prev[10];
	end
	if (
		( instruction_expected_prev[11] !== 1'bx ) && ( instruction_prev[11] !== instruction_expected_prev[11] )
		&& ((instruction_expected_prev[11] !== last_instruction_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[11] = instruction_expected_prev[11];
	end
	if (
		( instruction_expected_prev[12] !== 1'bx ) && ( instruction_prev[12] !== instruction_expected_prev[12] )
		&& ((instruction_expected_prev[12] !== last_instruction_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[12] = instruction_expected_prev[12];
	end
	if (
		( instruction_expected_prev[13] !== 1'bx ) && ( instruction_prev[13] !== instruction_expected_prev[13] )
		&& ((instruction_expected_prev[13] !== last_instruction_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[13] = instruction_expected_prev[13];
	end
	if (
		( instruction_expected_prev[14] !== 1'bx ) && ( instruction_prev[14] !== instruction_expected_prev[14] )
		&& ((instruction_expected_prev[14] !== last_instruction_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[14] = instruction_expected_prev[14];
	end
	if (
		( instruction_expected_prev[15] !== 1'bx ) && ( instruction_prev[15] !== instruction_expected_prev[15] )
		&& ((instruction_expected_prev[15] !== last_instruction_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_instruction_exp[15] = instruction_expected_prev[15];
	end
	if (
		( jr_expected_prev !== 1'bx ) && ( jr_prev !== jr_expected_prev )
		&& ((jr_expected_prev !== last_jr_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jr :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jr_expected_prev);
		$display ("     Real value = %b", jr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_jr_exp = jr_expected_prev;
	end
	if (
		( jump_expected_prev !== 1'bx ) && ( jump_prev !== jump_expected_prev )
		&& ((jump_expected_prev !== last_jump_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_expected_prev);
		$display ("     Real value = %b", jump_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_jump_exp = jump_expected_prev;
	end
	if (
		( pc_2_expected_prev[0] !== 1'bx ) && ( pc_2_prev[0] !== pc_2_expected_prev[0] )
		&& ((pc_2_expected_prev[0] !== last_pc_2_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_2_expected_prev);
		$display ("     Real value = %b", pc_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_pc_2_exp[0] = pc_2_expected_prev[0];
	end
	if (
		( pc_2_expected_prev[1] !== 1'bx ) && ( pc_2_prev[1] !== pc_2_expected_prev[1] )
		&& ((pc_2_expected_prev[1] !== last_pc_2_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_2_expected_prev);
		$display ("     Real value = %b", pc_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_pc_2_exp[1] = pc_2_expected_prev[1];
	end
	if (
		( pc_2_expected_prev[2] !== 1'bx ) && ( pc_2_prev[2] !== pc_2_expected_prev[2] )
		&& ((pc_2_expected_prev[2] !== last_pc_2_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_2_expected_prev);
		$display ("     Real value = %b", pc_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_pc_2_exp[2] = pc_2_expected_prev[2];
	end
	if (
		( pc_2_expected_prev[3] !== 1'bx ) && ( pc_2_prev[3] !== pc_2_expected_prev[3] )
		&& ((pc_2_expected_prev[3] !== last_pc_2_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_2_expected_prev);
		$display ("     Real value = %b", pc_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_pc_2_exp[3] = pc_2_expected_prev[3];
	end
	if (
		( pc_2_expected_prev[4] !== 1'bx ) && ( pc_2_prev[4] !== pc_2_expected_prev[4] )
		&& ((pc_2_expected_prev[4] !== last_pc_2_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_2_expected_prev);
		$display ("     Real value = %b", pc_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_pc_2_exp[4] = pc_2_expected_prev[4];
	end
	if (
		( pc_2_expected_prev[5] !== 1'bx ) && ( pc_2_prev[5] !== pc_2_expected_prev[5] )
		&& ((pc_2_expected_prev[5] !== last_pc_2_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_2_expected_prev);
		$display ("     Real value = %b", pc_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_pc_2_exp[5] = pc_2_expected_prev[5];
	end
	if (
		( pc_2_expected_prev[6] !== 1'bx ) && ( pc_2_prev[6] !== pc_2_expected_prev[6] )
		&& ((pc_2_expected_prev[6] !== last_pc_2_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_2_expected_prev);
		$display ("     Real value = %b", pc_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_pc_2_exp[6] = pc_2_expected_prev[6];
	end
	if (
		( pc_2_expected_prev[7] !== 1'bx ) && ( pc_2_prev[7] !== pc_2_expected_prev[7] )
		&& ((pc_2_expected_prev[7] !== last_pc_2_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_2_expected_prev);
		$display ("     Real value = %b", pc_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_pc_2_exp[7] = pc_2_expected_prev[7];
	end
	if (
		( pcIn_expected_prev[0] !== 1'bx ) && ( pcIn_prev[0] !== pcIn_expected_prev[0] )
		&& ((pcIn_expected_prev[0] !== last_pcIn_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcIn[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcIn_expected_prev);
		$display ("     Real value = %b", pcIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_pcIn_exp[0] = pcIn_expected_prev[0];
	end
	if (
		( pcIn_expected_prev[1] !== 1'bx ) && ( pcIn_prev[1] !== pcIn_expected_prev[1] )
		&& ((pcIn_expected_prev[1] !== last_pcIn_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcIn[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcIn_expected_prev);
		$display ("     Real value = %b", pcIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_pcIn_exp[1] = pcIn_expected_prev[1];
	end
	if (
		( pcIn_expected_prev[2] !== 1'bx ) && ( pcIn_prev[2] !== pcIn_expected_prev[2] )
		&& ((pcIn_expected_prev[2] !== last_pcIn_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcIn[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcIn_expected_prev);
		$display ("     Real value = %b", pcIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_pcIn_exp[2] = pcIn_expected_prev[2];
	end
	if (
		( pcIn_expected_prev[3] !== 1'bx ) && ( pcIn_prev[3] !== pcIn_expected_prev[3] )
		&& ((pcIn_expected_prev[3] !== last_pcIn_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcIn[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcIn_expected_prev);
		$display ("     Real value = %b", pcIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_pcIn_exp[3] = pcIn_expected_prev[3];
	end
	if (
		( pcIn_expected_prev[4] !== 1'bx ) && ( pcIn_prev[4] !== pcIn_expected_prev[4] )
		&& ((pcIn_expected_prev[4] !== last_pcIn_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcIn[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcIn_expected_prev);
		$display ("     Real value = %b", pcIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_pcIn_exp[4] = pcIn_expected_prev[4];
	end
	if (
		( pcIn_expected_prev[5] !== 1'bx ) && ( pcIn_prev[5] !== pcIn_expected_prev[5] )
		&& ((pcIn_expected_prev[5] !== last_pcIn_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcIn[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcIn_expected_prev);
		$display ("     Real value = %b", pcIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_pcIn_exp[5] = pcIn_expected_prev[5];
	end
	if (
		( pcIn_expected_prev[6] !== 1'bx ) && ( pcIn_prev[6] !== pcIn_expected_prev[6] )
		&& ((pcIn_expected_prev[6] !== last_pcIn_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcIn[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcIn_expected_prev);
		$display ("     Real value = %b", pcIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_pcIn_exp[6] = pcIn_expected_prev[6];
	end
	if (
		( pcIn_expected_prev[7] !== 1'bx ) && ( pcIn_prev[7] !== pcIn_expected_prev[7] )
		&& ((pcIn_expected_prev[7] !== last_pcIn_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcIn[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcIn_expected_prev);
		$display ("     Real value = %b", pcIn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_pcIn_exp[7] = pcIn_expected_prev[7];
	end
	if (
		( pcOut_expected_prev[0] !== 1'bx ) && ( pcOut_prev[0] !== pcOut_expected_prev[0] )
		&& ((pcOut_expected_prev[0] !== last_pcOut_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcOut_expected_prev);
		$display ("     Real value = %b", pcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pcOut_exp[0] = pcOut_expected_prev[0];
	end
	if (
		( pcOut_expected_prev[1] !== 1'bx ) && ( pcOut_prev[1] !== pcOut_expected_prev[1] )
		&& ((pcOut_expected_prev[1] !== last_pcOut_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcOut_expected_prev);
		$display ("     Real value = %b", pcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pcOut_exp[1] = pcOut_expected_prev[1];
	end
	if (
		( pcOut_expected_prev[2] !== 1'bx ) && ( pcOut_prev[2] !== pcOut_expected_prev[2] )
		&& ((pcOut_expected_prev[2] !== last_pcOut_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcOut_expected_prev);
		$display ("     Real value = %b", pcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pcOut_exp[2] = pcOut_expected_prev[2];
	end
	if (
		( pcOut_expected_prev[3] !== 1'bx ) && ( pcOut_prev[3] !== pcOut_expected_prev[3] )
		&& ((pcOut_expected_prev[3] !== last_pcOut_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcOut_expected_prev);
		$display ("     Real value = %b", pcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pcOut_exp[3] = pcOut_expected_prev[3];
	end
	if (
		( pcOut_expected_prev[4] !== 1'bx ) && ( pcOut_prev[4] !== pcOut_expected_prev[4] )
		&& ((pcOut_expected_prev[4] !== last_pcOut_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcOut_expected_prev);
		$display ("     Real value = %b", pcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pcOut_exp[4] = pcOut_expected_prev[4];
	end
	if (
		( pcOut_expected_prev[5] !== 1'bx ) && ( pcOut_prev[5] !== pcOut_expected_prev[5] )
		&& ((pcOut_expected_prev[5] !== last_pcOut_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcOut_expected_prev);
		$display ("     Real value = %b", pcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pcOut_exp[5] = pcOut_expected_prev[5];
	end
	if (
		( pcOut_expected_prev[6] !== 1'bx ) && ( pcOut_prev[6] !== pcOut_expected_prev[6] )
		&& ((pcOut_expected_prev[6] !== last_pcOut_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcOut_expected_prev);
		$display ("     Real value = %b", pcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pcOut_exp[6] = pcOut_expected_prev[6];
	end
	if (
		( pcOut_expected_prev[7] !== 1'bx ) && ( pcOut_prev[7] !== pcOut_expected_prev[7] )
		&& ((pcOut_expected_prev[7] !== last_pcOut_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcOut_expected_prev);
		$display ("     Real value = %b", pcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pcOut_exp[7] = pcOut_expected_prev[7];
	end
	if (
		( writeData_expected_prev[0] !== 1'bx ) && ( writeData_prev[0] !== writeData_expected_prev[0] )
		&& ((writeData_expected_prev[0] !== last_writeData_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port writeData[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", writeData_expected_prev);
		$display ("     Real value = %b", writeData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_writeData_exp[0] = writeData_expected_prev[0];
	end
	if (
		( writeData_expected_prev[1] !== 1'bx ) && ( writeData_prev[1] !== writeData_expected_prev[1] )
		&& ((writeData_expected_prev[1] !== last_writeData_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port writeData[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", writeData_expected_prev);
		$display ("     Real value = %b", writeData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_writeData_exp[1] = writeData_expected_prev[1];
	end
	if (
		( writeData_expected_prev[2] !== 1'bx ) && ( writeData_prev[2] !== writeData_expected_prev[2] )
		&& ((writeData_expected_prev[2] !== last_writeData_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port writeData[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", writeData_expected_prev);
		$display ("     Real value = %b", writeData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_writeData_exp[2] = writeData_expected_prev[2];
	end
	if (
		( writeData_expected_prev[3] !== 1'bx ) && ( writeData_prev[3] !== writeData_expected_prev[3] )
		&& ((writeData_expected_prev[3] !== last_writeData_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port writeData[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", writeData_expected_prev);
		$display ("     Real value = %b", writeData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_writeData_exp[3] = writeData_expected_prev[3];
	end
	if (
		( writeData_expected_prev[4] !== 1'bx ) && ( writeData_prev[4] !== writeData_expected_prev[4] )
		&& ((writeData_expected_prev[4] !== last_writeData_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port writeData[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", writeData_expected_prev);
		$display ("     Real value = %b", writeData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_writeData_exp[4] = writeData_expected_prev[4];
	end
	if (
		( writeData_expected_prev[5] !== 1'bx ) && ( writeData_prev[5] !== writeData_expected_prev[5] )
		&& ((writeData_expected_prev[5] !== last_writeData_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port writeData[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", writeData_expected_prev);
		$display ("     Real value = %b", writeData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_writeData_exp[5] = writeData_expected_prev[5];
	end
	if (
		( writeData_expected_prev[6] !== 1'bx ) && ( writeData_prev[6] !== writeData_expected_prev[6] )
		&& ((writeData_expected_prev[6] !== last_writeData_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port writeData[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", writeData_expected_prev);
		$display ("     Real value = %b", writeData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_writeData_exp[6] = writeData_expected_prev[6];
	end
	if (
		( writeData_expected_prev[7] !== 1'bx ) && ( writeData_prev[7] !== writeData_expected_prev[7] )
		&& ((writeData_expected_prev[7] !== last_writeData_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port writeData[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", writeData_expected_prev);
		$display ("     Real value = %b", writeData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_writeData_exp[7] = writeData_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module datapath_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg i_clock;
// wires                                               
wire [7:0] ALUresult;
wire [7:0] currPc;
wire [7:0] finalOut;
wire [15:0] instruction;
wire jr;
wire jump;
wire [7:0] pc_2;
wire [7:0] pcIn;
wire [7:0] pcOut;
wire [7:0] writeData;

wire sampler;                             

// assign statements (if any)                          
datapath i1 (
// port map - connection between master ports and signals/registers   
	.ALUresult(ALUresult),
	.clk(clk),
	.currPc(currPc),
	.finalOut(finalOut),
	.i_clock(i_clock),
	.instruction(instruction),
	.jr(jr),
	.jump(jump),
	.pc_2(pc_2),
	.pcIn(pcIn),
	.pcOut(pcOut),
	.writeData(writeData)
);

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 

// i_clock
initial
begin
	i_clock = 1'b0;
	i_clock = #30000 1'b1;
	# 20000;
	repeat(248)
	begin
		i_clock = 1'b0;
		i_clock = #20000 1'b1;
		# 20000;
	end
	i_clock = 1'b0;
	i_clock = #20000 1'b1;
end 

datapath_vlg_sample_tst tb_sample (
	.clk(clk),
	.i_clock(i_clock),
	.sampler_tx(sampler)
);

datapath_vlg_check_tst tb_out(
	.ALUresult(ALUresult),
	.currPc(currPc),
	.finalOut(finalOut),
	.instruction(instruction),
	.jr(jr),
	.jump(jump),
	.pc_2(pc_2),
	.pcIn(pcIn),
	.pcOut(pcOut),
	.writeData(writeData),
	.sampler_rx(sampler)
);
endmodule

